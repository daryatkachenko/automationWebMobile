'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _remoteDebugger = require('./remote-debugger');

var _remoteMessages = require('./remote-messages');

var _remoteMessages2 = _interopRequireDefault(_remoteMessages);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _helpers = require('./helpers');

var WebKitRpcClient = (function (_events$EventEmitter) {
  _inherits(WebKitRpcClient, _events$EventEmitter);

  function WebKitRpcClient(host) {
    var port = arguments.length <= 1 || arguments[1] === undefined ? _remoteDebugger.REMOTE_DEBUGGER_PORT : arguments[1];
    var responseTimeout = arguments.length <= 2 || arguments[2] === undefined ? _remoteDebugger.RPC_RESPONSE_TIMEOUT_MS : arguments[2];

    _classCallCheck(this, WebKitRpcClient);

    _get(Object.getPrototypeOf(WebKitRpcClient.prototype), 'constructor', this).call(this);

    this.host = host;
    this.port = port;

    this.responseTimeout = responseTimeout;

    this.curMsgId = 0;

    this.dataHandlers = {};
    this.dataMethods = {};
    this.errorHandlers = {};

    this.setHandlers();
  }

  _createClass(WebKitRpcClient, [{
    key: 'connect',
    value: function connect(pageId) {
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              // we will only resolve this call when the socket is open
              // WebKit url
              var url = 'ws://' + _this.host + ':' + _this.port + '/devtools/page/' + pageId;
              _this.pageIdKey = pageId;

              // create and set up socket with appropriate event handlers
              _this.socket = new _ws2['default'](url);
              _this.socket.on('open', function () {
                _logger2['default'].debug('WebKit debugger web socket connected to url: ' + url);
                _this.connected = true;
                resolve();
              });
              _this.socket.on('close', function () {
                _logger2['default'].debug('WebKit remote debugger socket disconnected');
                _this.connected = false;
              });
              _this.socket.on('error', function (exception) {
                if (_this.connected) {
                  _logger2['default'].debug('WebKit debugger web socket error: ' + exception.message);
                  _this.connected = false;
                }

                reject(exception);
              });
              _this.socket.on('message', _this.receive.bind(_this));
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      _logger2['default'].debug('Disconnecting from WebKit remote debugger');
      if (this.isConnected()) {
        this.socket.close(1001);
      }
      this.connected = false;
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this.socket !== null && this.connected;
    }
  }, {
    key: 'send',
    value: function send(command) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var data, id;
      return _regeneratorRuntime.async(function send$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            data = (0, _remoteMessages2['default'])(command, _lodash2['default'].defaults({ connId: this.connId, senderId: this.senderId }, opts));

            _logger2['default'].debug('Sending WebKit data: ' + _lodash2['default'].truncate(JSON.stringify(data), 50));
            _logger2['default'].debug('Webkit response timeout: ' + this.responseTimeout);

            this.curMsgId++;
            data.id = this.curMsgId;

            id = this.curMsgId.toString();
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              // only resolve the send command when WebKit returns a response
              // store the handler and the data sent
              _this2.dataHandlers[id] = resolve;
              _this2.dataMethods[id] = data.method;
              _this2.errorHandlers[id] = reject;

              // send the data
              data = JSON.stringify(data);
              _this2.socket.send(data, function (error) {
                if (!_lodash2['default'].isUndefined(error) && !_lodash2['default'].isNull(error)) {
                  _logger2['default'].debug('WebKit socket error occurred: ' + error);
                  reject(new Error(error));
                }
              });
            })['finally'](function (res) {
              // no need to hold onto anything
              delete _this2.dataHandlers[id];
              delete _this2.dataMethods[id];
              delete _this2.errorHandlers[id];

              // and pass along the result
              return res;
            }).timeout(this.responseTimeout));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'receive',
    value: function receive(data) {
      _logger2['default'].debug('Receiving WebKit data: ' + _lodash2['default'].truncate(data, 50));

      data = JSON.parse(data);

      // we can get an error, or we can get a response that is an error
      if (data.wasThrown) {
        var message = data.result.value || data.result.description;
        var error = new Error(message);
        if (data.id && this.errorHandlers[data.id]) {
          this.errorHandlers[data.id](error);
          return;
        } else {
          // this should never happen, but log at least
          _logger2['default'].errorAndThrow(error);
        }
      }

      // when sending we set a data method and associated callback.
      // get that, or the generic (automatically sent, not associated
      // with a particular request) method
      var handlerFor = undefined;
      if (data.id && this.dataMethods[data.id]) {
        _logger2['default'].debug('Found handler for message \'' + data.id + '\'');
        handlerFor = this.dataMethods[data.id];
      } else {
        _logger2['default'].debug('Did not find handler for message');
        handlerFor = data.method;
      }

      if (!handlerFor) {
        _logger2['default'].debug('Received an invalid method: ' + data.method);
        return;
      }
      if (_lodash2['default'].has(this.handlers, handlerFor)) {
        this.handlers[handlerFor](data);
      } else {
        _logger2['default'].debug('WebKit debugger got a message for \'' + handlerFor + '\' ' + 'and have no handler, doing nothing.');
      }
    }
  }, {
    key: 'setHandlers',
    value: function setHandlers() {
      var _this3 = this;

      this.handlers = {
        'Runtime.evaluate': function RuntimeEvaluate(data) {
          var msgId = data.id;
          if (data.error) {
            _this3.errorHandlers[msgId](data.error);
          }

          _this3.dataHandlers[msgId](data.result);
        },
        'Page.navigate': function PageNavigate(data) {
          _logger2['default'].debug('Received page navigated message: ' + (0, _helpers.simpleStringify)(data));
          var msgId = data.id;
          if (data.error) {
            _this3.errorHandlers[msgId](data.error);
          }

          _this3.dataHandlers[msgId](data.result);
        },
        'Profiler.resetProfiles': function ProfilerResetProfiles() {
          _logger2['default'].debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');
        },
        'Timeline.eventRecorded': function TimelineEventRecorded(data) {
          _this3.timelineEventHandler(data.result);
        }
      };
    }
  }, {
    key: 'setTimelineEventHandler',
    value: function setTimelineEventHandler(timelineEventHandler) {
      this.timelineEventHandler = timelineEventHandler;
      this.messageHandler.setTimelineEventHandler(timelineEventHandler);
    }
  }]);

  return WebKitRpcClient;
})(_events2['default'].EventEmitter);

exports['default'] = WebKitRpcClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJraXQtcnBjLWNsaWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBQWdCLFVBQVU7Ozs7OEJBQ29DLG1CQUFtQjs7OEJBQ3BELG1CQUFtQjs7OztrQkFDMUIsSUFBSTs7Ozt3QkFDTixVQUFVOzs7O3NCQUNoQixRQUFROzs7O3NCQUNILFFBQVE7Ozs7dUJBQ0ssV0FBVzs7SUFHdEIsZUFBZTtZQUFmLGVBQWU7O0FBQ3RCLFdBRE8sZUFBZSxDQUNyQixJQUFJLEVBQTBFO1FBQXhFLElBQUk7UUFBeUIsZUFBZTs7MEJBRDVDLGVBQWU7O0FBRWhDLCtCQUZpQixlQUFlLDZDQUV4Qjs7QUFFUixRQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNqQixRQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzs7QUFFakIsUUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7O0FBRXZDLFFBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDOztBQUVsQixRQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUN2QixRQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUN0QixRQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQzs7QUFFeEIsUUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0dBQ3BCOztlQWhCa0IsZUFBZTs7V0FrQnBCLGlCQUFDLE1BQU07Ozs7OztnREFDWiwwQkFBWSxVQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUs7OztBQUd0QyxrQkFBSSxHQUFHLGFBQVcsTUFBSyxJQUFJLFNBQUksTUFBSyxJQUFJLHVCQUFrQixNQUFNLEFBQUUsQ0FBQztBQUNuRSxvQkFBSyxTQUFTLEdBQUcsTUFBTSxDQUFDOzs7QUFHeEIsb0JBQUssTUFBTSxHQUFHLG9CQUFjLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLG9CQUFLLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFlBQU07QUFDM0Isb0NBQUks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QUFLLENBQUMsQ0FBQztXQUN2Qzs7QUFFRCxpQkFBSyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZDO0FBQ0QsZ0NBQXdCLEVBQUUsaUNBQU07QUFDOUIsOEJBQUksS0FBSyxDQUFDLDBEQUEwRCxHQUMxRCwrQkFBK0IsQ0FBQyxDQUFDO1NBQzVDO0FBQ0QsZ0NBQXdCLEVBQUUsK0JBQUMsSUFBSSxFQUFLO0FBQ2xDLGlCQUFLLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4QztPQUNGLENBQUM7S0FDSDs7O1dBR3VCLGlDQUFDLG9CQUFvQixFQUFFO0FBQzdDLFVBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztBQUNqRCxVQUFJLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDbkU7OztTQTdLa0IsZUFBZTtHQUFTLG9CQUFPLFlBQVk7O3FCQUEzQyxlQUFlIiwiZmlsZSI6ImxpYi93ZWJraXQtcnBjLWNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgUkVNT1RFX0RFQlVHR0VSX1BPUlQsIFJQQ19SRVNQT05TRV9USU1FT1VUX01TIH0gZnJvbSAnLi9yZW1vdGUtZGVidWdnZXInO1xuaW1wb3J0IGdldFJlbW90ZUNvbW1hbmQgZnJvbSAnLi9yZW1vdGUtbWVzc2FnZXMnO1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cyc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgc2ltcGxlU3RyaW5naWZ5IH0gZnJvbSAnLi9oZWxwZXJzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJLaXRScGNDbGllbnQgZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKGhvc3QsIHBvcnQgPSBSRU1PVEVfREVCVUdHRVJfUE9SVCwgcmVzcG9uc2VUaW1lb3V0ID0gUlBDX1JFU1BPTlNFX1RJTUVPVVRfTVMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICB0aGlzLnBvcnQgPSBwb3J0O1xuXG4gICAgdGhpcy5yZXNwb25zZVRpbWVvdXQgPSByZXNwb25zZVRpbWVvdXQ7XG5cbiAgICB0aGlzLmN1ck1zZ0lkID0gMDtcblxuICAgIHRoaXMuZGF0YUhhbmRsZXJzID0ge307XG4gICAgdGhpcy5kYXRhTWV0aG9kcyA9IHt9O1xuICAgIHRoaXMuZXJyb3JIYW5kbGVycyA9IHt9O1xuXG4gICAgdGhpcy5zZXRIYW5kbGVycygpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdCAocGFnZUlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIC8vIHdlIHdpbGwgb25seSByZXNvbHZlIHRoaXMgY2FsbCB3aGVuIHRoZSBzb2NrZXQgaXMgb3BlblxuICAgICAgLy8gV2ViS2l0IHVybFxuICAgICAgbGV0IHVybCA9IGB3czovLyR7dGhpcy5ob3N0fToke3RoaXMucG9ydH0vZGV2dG9vbHMvcGFnZS8ke3BhZ2VJZH1gO1xuICAgICAgdGhpcy5wYWdlSWRLZXkgPSBwYWdlSWQ7XG5cbiAgICAgIC8vIGNyZWF0ZSBhbmQgc2V0IHVwIHNvY2tldCB3aXRoIGFwcHJvcHJpYXRlIGV2ZW50IGhhbmRsZXJzXG4gICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgICAgIHRoaXMuc29ja2V0Lm9uKCdvcGVuJywgKCkgPT4ge1xuICAgICAgICBsb2cuZGVidWcoYFdlYktpdCBkZWJ1Z2dlciB3ZWIgc29ja2V0IGNvbm5lY3RlZCB0byB1cmw6ICR7dXJsfWApO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zb2NrZXQub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICBsb2cuZGVidWcoJ1dlYktpdCByZW1vdGUgZGVidWdnZXIgc29ja2V0IGRpc2Nvbm5lY3RlZCcpO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNvY2tldC5vbignZXJyb3InLCAoZXhjZXB0aW9uKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhgV2ViS2l0IGRlYnVnZ2VyIHdlYiBzb2NrZXQgZXJyb3I6ICR7ZXhjZXB0aW9uLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlamVjdChleGNlcHRpb24pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNvY2tldC5vbignbWVzc2FnZScsIHRoaXMucmVjZWl2ZS5iaW5kKHRoaXMpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3QgKCkge1xuICAgIGxvZy5kZWJ1ZygnRGlzY29ubmVjdGluZyBmcm9tIFdlYktpdCByZW1vdGUgZGVidWdnZXInKTtcbiAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICB0aGlzLnNvY2tldC5jbG9zZSgxMDAxKTtcbiAgICB9XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlzQ29ubmVjdGVkICgpIHtcbiAgICByZXR1cm4gKHRoaXMuc29ja2V0ICE9PSBudWxsICYmIHRoaXMuY29ubmVjdGVkKTtcbiAgfVxuXG5cbiAgYXN5bmMgc2VuZCAoY29tbWFuZCwgb3B0cyA9IHt9KSB7XG4gICAgbGV0IGRhdGEgPSBnZXRSZW1vdGVDb21tYW5kKGNvbW1hbmQsIF8uZGVmYXVsdHMoe2Nvbm5JZDogdGhpcy5jb25uSWQsIHNlbmRlcklkOiB0aGlzLnNlbmRlcklkfSwgb3B0cykpO1xuXG4gICAgbG9nLmRlYnVnKGBTZW5kaW5nIFdlYktpdCBkYXRhOiAke18udHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkoZGF0YSksIDUwKX1gKTtcbiAgICBsb2cuZGVidWcoYFdlYmtpdCByZXNwb25zZSB0aW1lb3V0OiAke3RoaXMucmVzcG9uc2VUaW1lb3V0fWApO1xuXG4gICAgdGhpcy5jdXJNc2dJZCsrO1xuICAgIGRhdGEuaWQgPSB0aGlzLmN1ck1zZ0lkO1xuXG4gICAgbGV0IGlkID0gdGhpcy5jdXJNc2dJZC50b1N0cmluZygpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBvbmx5IHJlc29sdmUgdGhlIHNlbmQgY29tbWFuZCB3aGVuIFdlYktpdCByZXR1cm5zIGEgcmVzcG9uc2VcbiAgICAgIC8vIHN0b3JlIHRoZSBoYW5kbGVyIGFuZCB0aGUgZGF0YSBzZW50XG4gICAgICB0aGlzLmRhdGFIYW5kbGVyc1tpZF0gPSByZXNvbHZlO1xuICAgICAgdGhpcy5kYXRhTWV0aG9kc1tpZF0gPSBkYXRhLm1ldGhvZDtcbiAgICAgIHRoaXMuZXJyb3JIYW5kbGVyc1tpZF0gPSByZWplY3Q7XG5cbiAgICAgIC8vIHNlbmQgdGhlIGRhdGFcbiAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgIHRoaXMuc29ja2V0LnNlbmQoZGF0YSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChlcnJvcikgJiYgIV8uaXNOdWxsKGVycm9yKSkge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhgV2ViS2l0IHNvY2tldCBlcnJvciBvY2N1cnJlZDogJHtlcnJvcn1gKTtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pLmZpbmFsbHkoKHJlcykgPT4ge1xuICAgICAgLy8gbm8gbmVlZCB0byBob2xkIG9udG8gYW55dGhpbmdcbiAgICAgIGRlbGV0ZSB0aGlzLmRhdGFIYW5kbGVyc1tpZF07XG4gICAgICBkZWxldGUgdGhpcy5kYXRhTWV0aG9kc1tpZF07XG4gICAgICBkZWxldGUgdGhpcy5lcnJvckhhbmRsZXJzW2lkXTtcblxuICAgICAgLy8gYW5kIHBhc3MgYWxvbmcgdGhlIHJlc3VsdFxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KS50aW1lb3V0KHRoaXMucmVzcG9uc2VUaW1lb3V0KTtcbiAgfVxuXG5cbiAgcmVjZWl2ZSAoZGF0YSkge1xuICAgIGxvZy5kZWJ1ZyhgUmVjZWl2aW5nIFdlYktpdCBkYXRhOiAke18udHJ1bmNhdGUoZGF0YSwgNTApfWApO1xuXG4gICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICAvLyB3ZSBjYW4gZ2V0IGFuIGVycm9yLCBvciB3ZSBjYW4gZ2V0IGEgcmVzcG9uc2UgdGhhdCBpcyBhbiBlcnJvclxuICAgIGlmIChkYXRhLndhc1Rocm93bikge1xuICAgICAgbGV0IG1lc3NhZ2UgPSBkYXRhLnJlc3VsdC52YWx1ZSB8fCBkYXRhLnJlc3VsdC5kZXNjcmlwdGlvbjtcbiAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIGlmIChkYXRhLmlkICYmIHRoaXMuZXJyb3JIYW5kbGVyc1tkYXRhLmlkXSkge1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlcnNbZGF0YS5pZF0oZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIGJ1dCBsb2cgYXQgbGVhc3RcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coZXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHdoZW4gc2VuZGluZyB3ZSBzZXQgYSBkYXRhIG1ldGhvZCBhbmQgYXNzb2NpYXRlZCBjYWxsYmFjay5cbiAgICAvLyBnZXQgdGhhdCwgb3IgdGhlIGdlbmVyaWMgKGF1dG9tYXRpY2FsbHkgc2VudCwgbm90IGFzc29jaWF0ZWRcbiAgICAvLyB3aXRoIGEgcGFydGljdWxhciByZXF1ZXN0KSBtZXRob2RcbiAgICBsZXQgaGFuZGxlckZvcjtcbiAgICBpZiAoZGF0YS5pZCAmJiB0aGlzLmRhdGFNZXRob2RzW2RhdGEuaWRdKSB7XG4gICAgICBsb2cuZGVidWcoYEZvdW5kIGhhbmRsZXIgZm9yIG1lc3NhZ2UgJyR7ZGF0YS5pZH0nYCk7XG4gICAgICBoYW5kbGVyRm9yID0gdGhpcy5kYXRhTWV0aG9kc1tkYXRhLmlkXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKGBEaWQgbm90IGZpbmQgaGFuZGxlciBmb3IgbWVzc2FnZWApO1xuICAgICAgaGFuZGxlckZvciA9IGRhdGEubWV0aG9kO1xuICAgIH1cblxuICAgIGlmICghaGFuZGxlckZvcikge1xuICAgICAgbG9nLmRlYnVnKGBSZWNlaXZlZCBhbiBpbnZhbGlkIG1ldGhvZDogJHtkYXRhLm1ldGhvZH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKF8uaGFzKHRoaXMuaGFuZGxlcnMsIGhhbmRsZXJGb3IpKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2hhbmRsZXJGb3JdKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuZGVidWcoYFdlYktpdCBkZWJ1Z2dlciBnb3QgYSBtZXNzYWdlIGZvciAnJHtoYW5kbGVyRm9yfScgYCArXG4gICAgICAgICAgICAgICAgYGFuZCBoYXZlIG5vIGhhbmRsZXIsIGRvaW5nIG5vdGhpbmcuYCk7XG4gICAgfVxuICB9XG5cbiAgc2V0SGFuZGxlcnMgKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSB7XG4gICAgICAnUnVudGltZS5ldmFsdWF0ZSc6IChkYXRhKSA9PiB7XG4gICAgICAgIGxldCBtc2dJZCA9IGRhdGEuaWQ7XG4gICAgICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICAgICAgdGhpcy5lcnJvckhhbmRsZXJzW21zZ0lkXShkYXRhLmVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGF0YUhhbmRsZXJzW21zZ0lkXShkYXRhLnJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgJ1BhZ2UubmF2aWdhdGUnOiAoZGF0YSkgPT4ge1xuICAgICAgICBsb2cuZGVidWcoYFJlY2VpdmVkIHBhZ2UgbmF2aWdhdGVkIG1lc3NhZ2U6ICR7c2ltcGxlU3RyaW5naWZ5KGRhdGEpfWApO1xuICAgICAgICBsZXQgbXNnSWQgPSBkYXRhLmlkO1xuICAgICAgICBpZiAoZGF0YS5lcnJvcikge1xuICAgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyc1ttc2dJZF0oZGF0YS5lcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGFIYW5kbGVyc1ttc2dJZF0oZGF0YS5yZXN1bHQpO1xuICAgICAgfSxcbiAgICAgICdQcm9maWxlci5yZXNldFByb2ZpbGVzJzogKCkgPT4ge1xuICAgICAgICBsb2cuZGVidWcoJ0RldmljZSBpcyB0ZWxsaW5nIHVzIHRvIHJlc2V0IHByb2ZpbGVzLiBTaG91bGQgcHJvYmFibHkgJyArXG4gICAgICAgICAgICAgICAgICAnZG8gc29tZSBraW5kIG9mIGNhbGxiYWNrIGhlcmUnKTtcbiAgICAgIH0sXG4gICAgICAnVGltZWxpbmUuZXZlbnRSZWNvcmRlZCc6IChkYXRhKSA9PiB7XG4gICAgICAgIHRoaXMudGltZWxpbmVFdmVudEhhbmRsZXIoZGF0YS5yZXN1bHQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuXG4gIHNldFRpbWVsaW5lRXZlbnRIYW5kbGVyICh0aW1lbGluZUV2ZW50SGFuZGxlcikge1xuICAgIHRoaXMudGltZWxpbmVFdmVudEhhbmRsZXIgPSB0aW1lbGluZUV2ZW50SGFuZGxlcjtcbiAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNldFRpbWVsaW5lRXZlbnRIYW5kbGVyKHRpbWVsaW5lRXZlbnRIYW5kbGVyKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
